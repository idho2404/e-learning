datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Update `.env` file with PostgreSQL connection string
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SISWA
  PENGAJAR
  ADMIN
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String?
  first_name   String?
  last_name    String?
  phone_number String?
  description  String?
  photo        String?
  role         Role     @default(SISWA)
  createdAt    DateTime @default(now())

  pengajaran Class[]      @relation("PengajarClasses")
  kelas      Class[]      @relation("SiswaClasses")
  KelasSiswa KelasSiswa[]

  @@map("users")
}

model Class {
  id          Int    @id @default(autoincrement())
  name        String @unique
  pengajar_id Int
  topic_id    Int
  pengajar    User   @relation("PengajarClasses", fields: [pengajar_id], references: [id])
  topic       Topic  @relation("ClassTopic", fields: [topic_id], references: [id]) // Add unique relation name

  siswa      User[]       @relation("SiswaClasses")
  meetings   Meeting[]
  assesments Assesment[]
  KelasSiswa KelasSiswa[]

  @@map("classes")
}

model Topic {
  id   Int    @id @default(autoincrement())
  name String

  kelas Class[] @relation("ClassTopic") // Use the same relation name as in Class

  @@map("topics")
}

model Meeting {
  id           Int     @id @default(autoincrement())
  kelas_id     Int
  tittle       String
  description  String
  vidio1       String
  title_vid1   String
  vidio2       String?
  title_vid2   String?
  vidio3       String?
  title_vid3   String?
  file_materi1 String
  file_materi2 String?
  file_materi3 String?

  kelas Class @relation(fields: [kelas_id], references: [id])

  @@map("meetings")
}

model KelasSiswa {
  id       Int @id @default(autoincrement())
  kelas_id Int
  user_id  Int

  kelas Class @relation(fields: [kelas_id], references: [id]) // Added inverse relation
  siswa User  @relation(fields: [user_id], references: [id]) // Added inverse relation

  @@map("kelas_siswa")
}

model Assesment {
  id          Int      @id @default(autoincrement())
  kelas_id    Int
  title       String
  deadline    DateTime
  description String
  file1       String?
  file2       String?
  file3       String?

  kelas   Class     @relation(fields: [kelas_id], references: [id])
  Jawaban Jawaban[]

  @@map("assesments")
}

model Book {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  cover       String
  file        String
  
  @@map("books")
}

model Jawaban {
  id           Int     @id @default(autoincrement())
  assesment_id Int
  jawaban      String?
  file         String?
  nilai        Int?

  assesments Assesment @relation(fields: [assesment_id], references: [id]) // Added inverse relation
}
